#!/usr/bin/php -q
<?php
set_time_limit (0);

$args = getopt("hp:vc:");
$address = isset($args['h']) ? $args['h'] : 'localhost';
$port = isset($args['p']) ? $args['p'] : '9000';
$verbose = isset($args['v']);
$config = isset($args['c']) ? $args['c'] : 'mock.conf';

if (!is_readable($config)) {
  echo "Unable to open $config for reading.\n";
  exit -1;
}

echo "Loading configuration from $config\n";
$rules = array();
$buffer = null;
foreach (explode("\n", file_get_contents("mock.conf")) as $line) {
  if (trim($line)) {
    if ($buffer) {
      $rules[$buffer] = $line;
      $buffer = null;
    } else {
      $buffer = $line;
    }
  }
}

$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_bind($sock, $address, $port) or die('Could not bind to address');
socket_listen($sock);
echo "Listening on $address:$port\n";

while (true) {
  $client = socket_accept($sock);
  echo "Incomming connection\n";

  $request = socket_read($client, 1024);

  if ($verbose) {
    echo "> ", str_replace("\n", "\n> ", trim($request)) . "\n";
  }

  $response = null;
  foreach ($rules as $pattern => $handler) {
    if (preg_match($pattern, $request)) {
      echo "Matching rule found: $pattern\n";
      if (preg_match('/\.php$/', $handler)) {
        ob_start();
        include($handler);
        $response = ob_get_clean();
      } else {
        $response = file_get_contents($handler);
      }
      break;
    }
  }

  if (!$response) {
    if (!$verbose) {
      echo "> ", str_replace("\n", "\n> ", trim($request)) . "\n";
    }
    $response = "HTTP/1.1 404 Not Found\n\n";
    if (!$verbose) {
      echo "< ", trim($response), "\n";
    }
  }

  if ($verbose) {
    if (strlen(trim($response)) > 1024) {
      $tmp = substr(trim($response), 0, 1024) . " (...)";
    } else {
      $tmp = trim($response);
    }
    echo "< ", str_replace("\n", "\n< ", $tmp), "\n";
  }

  socket_write($client, $response);

  socket_close($client);
}

echo "Shutting down\n";
socket_close($sock);
